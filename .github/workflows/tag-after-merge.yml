name: Tag After Merge

permissions:
  contents: write

on:
  push:
    branches:
      - main

jobs:
  create-tag-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get new version from package.json
        run: |
          VERSION=$(jq -r .version package.json)
          echo "version=$VERSION" >> $GITHUB_ENV

      - name: Get last tag (if exists)
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          LAST_TAG_STRIPPED=${LAST_TAG#v}
          echo "last_tag=$LAST_TAG_STRIPPED" >> $GITHUB_ENV

      - name: Check release type (skip patch)
        run: |
          NEW=${{ env.version }}
          OLD=${{ env.last_tag }}

          NEW_MAJOR=$(echo $NEW | cut -d. -f1)
          NEW_MINOR=$(echo $NEW | cut -d. -f2)
          OLD_MAJOR=$(echo $OLD | cut -d. -f1)
          OLD_MINOR=$(echo $OLD | cut -d. -f2)

          if [ "$NEW_MAJOR" -gt "$OLD_MAJOR" ]; then
            echo "release_type=major" >> $GITHUB_ENV
          elif [ "$NEW_MINOR" -gt "$OLD_MINOR" ]; then
            echo "release_type=minor" >> $GITHUB_ENV
          else
            echo "release_type=patch" >> $GITHUB_ENV
          fi

      - name: Skip if patch
        if: env.release_type == 'patch'
        run: echo "⚠️ Patch release detected → skipping tag & release."

      - name: Create and push git tag
        if: env.release_type != 'patch'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          if git rev-parse "v${{ env.version }}" >/dev/null 2>&1; then
            echo "✅ Tag v${{ env.version }} already exists, skipping."
          else
            git tag v${{ env.version }}
            git push origin v${{ env.version }}
          fi

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.18.2

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm run build

      - name: Extract release notes from CHANGELOG
        if: env.release_type != 'patch'
        run: |
          awk "/^## v${{ env.version }}[[:space:]]/{flag=1; next} /^## /{flag=0} flag" CHANGELOG.md > RELEASE_NOTES.md

          if [ "${{ env.release_type }}" = "major" ]; then
            echo "## 🚀 Major Release" > FINAL_NOTES.md
          elif [ "${{ env.release_type }}" = "minor" ]; then
            echo "## ✨ Minor Release" > FINAL_NOTES.md
          fi
          echo "" >> FINAL_NOTES.md
          cat RELEASE_NOTES.md >> FINAL_NOTES.md

      - name: Create GitHub Release
        if: env.release_type != 'patch'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.version }}
          name: Release v${{ env.version }}
          body_path: FINAL_NOTES.md
          make_latest: true
          files: dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
